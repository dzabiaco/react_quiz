{"version":3,"sources":["components/QuestionCard.tsx","App.styles.ts","utils.ts","API.ts","components/Input.tsx","components/Select.tsx","App.tsx","index.tsx"],"names":["QuestionCard","question","answers","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","key","disabled","onClick","value","GlobalStyle","createGlobalStyle","Wrapper","styled","div","shuffleArray","array","sort","Math","random","fetchQuizQuestions","a","amount","difficulty","endpoint","fetch","json","data","results","incorrect_answers","correct_answer","Input","props","useEffect","$","document","ready","M","updateTextFields","placeholder","id","type","onChange","event","numberQue","htmlFor","Select","formSelect","getOption","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","numberOfQuestions","setNumberOfQuestions","optionValue","setOptionValue","TOTAL_QUESTIONS","startTrivia","newQuestions","length","target","Number","console","log","isNaN","undefined","correct","e","currentTarget","prev","answerObject","correctAnswer","nextQuestion","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fb062a3e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AnswerObject } from '../API';\r\n\r\ntype Props = {\r\n    question: string,\r\n    answers: string[];\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: AnswerObject | undefined;\r\n    questionNr: number;\r\n    totalQuestions: number;\r\n    correct: boolean;\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> =\r\n    ({ question, answers, callback, userAnswer, questionNr, totalQuestions }) => (\r\n        <div>\r\n            <p className=\"number\">Question: {questionNr} / {totalQuestions}</p>\r\n            <p dangerouslySetInnerHTML={{ __html: question }}></p>\r\n        \r\n            <div className=\"answers\">\r\n                {answers.map(answer => (\r\n                    <div key={answer}>\r\n                        <button disabled={!!userAnswer} onClick={callback} className=\"btn\" value={answer}>\r\n                            <span dangerouslySetInnerHTML={{ __html: answer }}></span>\r\n                        </button>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\nexport default QuestionCard;","import styled, { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        height: 100vh;\r\n    }\r\n\r\n    body {\r\n        margin: 0;\r\n        padding: 0 20px;\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n\r\n    *{\r\n        box-sizing: border-box;\r\n        font-family: 'Catamaran', sans-serif;\r\n    }\r\n\r\n    .App {\r\n        display: flex;\r\n        height: 100vh;\r\n        text-align: center;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n    }\r\n\r\n    .answers{\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        justify-content: center;\r\n    }\r\n\r\n    .Footer{\r\n        width: 100%;\r\n        dispaly: flex;\r\n        flex-direction: row;\r\n        align-items: flex-end;\r\n        margin-top: 40px;\r\n    }\r\n\r\n    .Footer .logo img{\r\n        width: 150px;\r\n        height: 150px;\r\n    }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n    correct: boolean;\r\n    userClicked: boolean;\r\n}\r\n\r\n\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    .score {\r\n        font-size: 2rem;\r\n        margin: 0;\r\n    }\r\n\r\n    h1{\r\n        font-family: Fascinate Inline, sans-serif;\r\n        background-image:linear-gradient(180deg, #fff, #87f1ff);\r\n        background-size: 100%;\r\n        background-clip: text;\r\n        -webkit-background-clip: text;\r\n        -webkit-text-fill-color: transparent;\r\n        -moz-background-clip: text;\r\n        -mox-text-fill-color: transparent;\r\n        filter: drop-shadow(2px 2px #008583);\r\n        font-size: 70px;\r\n        font-weight: 400;\r\n        text-align: center;\r\n        margin: 20px;\r\n    }\r\n\r\n    .flex {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n    }\r\n    \r\n    .btn{\r\n        width: auto;\r\n        height: auto;\r\n        min-height: 50px;\r\n        margin: 10px;\r\n        line-height: 1.2;\r\n        box-shadow: 0 5px 10px rgba(0,0,0,0,0.25);\r\n    }\r\n    .btn:hover{\r\n        opacity: 0.8;\r\n    }\r\n\r\n    .FormGroup{\r\n        display: flex;\r\n        width: 100%;\r\n        justify-content: space-around;\r\n    }\r\n`;\r\n\r\n\r\n","export const shuffleArray = (array: any[]) => [...array].sort(()=>Math.random() - 0.5);","import { shuffleArray } from './utils';\r\n\r\nexport type Question = {\r\n    category: string,\r\n    correct_answer: string,\r\n    difficulty: string,\r\n    incorrect_answers: string[],\r\n    question: string,\r\n    correct: boolean\r\n};\r\n\r\nexport type AnswerObject = {\r\n    question: string,\r\n    answer: string,\r\n    correct: boolean,\r\n    correctAnswer: string;\r\n  };\r\n\r\nexport type QuestionState = Question & { answers: string[] }\r\n\r\nexport const url = \"https://opentdb.com/api.php?amount=10&type=multiple\";\r\n\r\nexport const fetchQuizQuestions = async (amount: number = 10, difficulty: string) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&type=multiple&difficulty=${difficulty}`;\r\n    const data = await (await fetch(endpoint)).json();\r\n    return data.results.map((question: Question) => (\r\n        {\r\n            ...question,\r\n            answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\r\n        }\r\n    ));\r\n}","import React, { useEffect } from 'react';\r\n\r\ntype Props = {\r\n    // numberQue?: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    numberQue?: any;\r\n}\r\n\r\nconst Input: React.FC<Props> = (props) => {\r\n    useEffect(() => {\r\n        $(document).ready(function () {\r\n            M.updateTextFields();\r\n        });\r\n    }, []);\r\n\r\n    return <div className=\"input-field col s6\">\r\n        <input placeholder=\"10\" id=\"number\" type=\"text\" onChange={(event) => props.numberQue(event)!} />\r\n        <label htmlFor=\"first_name\" className=\"active\">Choose quantity</label>\r\n    </div>\r\n\r\n};\r\n\r\nexport default Input;","import React, { useEffect } from 'react';\r\n\r\ntype Props = {\r\n    // getOption?: (event:  React.ChangeEvent<HTMLSelectElement>) => void;\r\n    getOption?: any;\r\n}\r\n\r\nconst Select: React.FC<Props> = (props) => {\r\n\r\n    useEffect(() => {\r\n        $(document).ready(function(){\r\n            $('select').formSelect();\r\n          });\r\n    }, []);\r\n\r\n    return <div>\r\n        <div className=\"input-field col s12\">\r\n            <select onChange={(event)=> props.getOption(event)!}>\r\n                <option value=\"easy\">Easy</option>\r\n                <option value=\"medium\">Medium</option>\r\n                <option value=\"hard\">Hard</option>\r\n            </select>\r\n            <label>Choose your difficulty</label>\r\n        </div>\r\n    </div>\r\n};\r\n\r\nexport default Select;\r\n\r\n","import React, { useState } from 'react';\nimport QuestionCard from './components/QuestionCard';\nimport { GlobalStyle, Wrapper } from './App.styles';\nimport Footer from './components/Footer';\nimport { fetchQuizQuestions, QuestionState } from './API';\nimport Input from './components/Input';\nimport Select from './components/Select';\n\nconst App = () => {\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<any[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [numberOfQuestions, setNumberOfQuestions] = useState(0);\n  const [optionValue, setOptionValue] = useState('');\n  let TOTAL_QUESTIONS: number = numberOfQuestions || 10;\n\n  const getQuantityOfQuestions = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.value === null) return;\n    setNumberOfQuestions(Number(event.target.value));\n    console.log(numberOfQuestions);\n  }\n\n  const getOptionValue = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setOptionValue(event.target.value);\n  }\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS = 10, optionValue);\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      //user Answer\n      const answer = e.currentTarget.value;\n      // check answer against correct \n      const correct = questions[number].correct_answer === answer;\n      // Add score\n      if (correct) setScore(prev => prev + 1);\n      const answerObject = {\n        question: questions[number],\n        answer, correct,\n        correctAnswer: questions[number].correct_answer\n      }\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n  }\n\n  const nexQuestion = () => {\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    }\n    else {\n      setNumber(nextQuestion);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <Wrapper>\n        <h1 className=\"header\">REACT QUIZ</h1>\n\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ?\n          <div className=\"FormGroup\">\n            <Input numberQue={getQuantityOfQuestions} />\n            <Select getOption={getOptionValue} />\n          </div>\n          : null}\n\n        {isNaN(numberOfQuestions) ? <span>Number of questions is invalid</span> : null}\n\n        {gameOver ||userAnswers.length === TOTAL_QUESTIONS ?\n          <button className=\"btn\" onClick={startTrivia}>Start</button>\n          : null}\n\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n        {loading && <div className=\"progress\">\n          <div className=\"indeterminate\"></div>\n        </div>}\n\n        {!gameOver && !loading && (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            correct={questions[number].correct}\n            callback={checkAnswer}\n          />)}\n\n\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n          <button className=\"btn\" onClick={nexQuestion}>Next Question</button>) : null\n        }\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}